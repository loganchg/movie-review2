{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\movie-review2\\\\client\\\\src\\\\components\\\\pages\\\\Avengers.js\";\nimport React, { useState, useEffect } from 'react';\nimport '../../App.css';\nimport Forms from '../PostingForm/Forms';\nimport { useHistory } from \"react-router-dom\";\nimport jwt from 'jsonwebtoken';\nexport default function Avengers() {\n  const history = useHistory();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n\n  async function populateQuote() {\n    const req = await fetch('http://localhost:5001/api/quote', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history.replace('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  });\n\n  async function updateQuote(event) {\n    event.preventDefault();\n    const req = await fetch('http://localhost:5001/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setTempQuote('');\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, quote || \"No quote found\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: updateQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Leave your review!\",\n    value: tempQuote,\n    onChange: e => setTempQuote(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Leave a Review\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","useEffect","Forms","useHistory","jwt","Avengers","history","quote","setQuote","tempQuote","setTempQuote","populateQuote","req","fetch","headers","localStorage","getItem","data","json","status","alert","error","token","user","decode","removeItem","replace","updateQuote","event","preventDefault","method","body","JSON","stringify","e","target","value"],"sources":["E:/Projects/movie-review2/client/src/components/pages/Avengers.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport '../../App.css';\r\nimport Forms from '../PostingForm/Forms';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport jwt from 'jsonwebtoken'\r\n\r\n\r\n\r\n\r\nexport default function Avengers() {\r\n  const history = useHistory()\r\n  const [quote, setQuote] = useState('')\r\n  const [tempQuote, setTempQuote] = useState('')\r\n\r\n\r\n  async function populateQuote(){\r\n      const req = await fetch('http://localhost:5001/api/quote', {\r\n          headers: {\r\n              'x-access-token': localStorage.getItem('token')\r\n          }\r\n      })\r\n\r\n      const data = await req.json()\r\n      if(data.status === 'ok'){\r\n          setQuote(data.quote)\r\n      } else {\r\n          alert(data.error)\r\n      }\r\n\r\n  }\r\n\r\n  useEffect(()=>{\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n          const user = jwt.decode(token)\r\n          if(!user) {\r\n              localStorage.removeItem('token')\r\n              history.replace('/login')\r\n          } else {\r\n              populateQuote()\r\n          }\r\n      }\r\n\r\n  },)\r\n\r\n  async function updateQuote(event){\r\n      event.preventDefault()\r\n      const req = await fetch('http://localhost:5001/api/quote', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n              'x-access-token': localStorage.getItem('token')\r\n          },\r\n          body: JSON.stringify({\r\n             quote: tempQuote,\r\n          })\r\n      })\r\n\r\n      const data = await req.json()\r\n      if(data.status === 'ok'){\r\n          setTempQuote('')\r\n          setQuote(data.quote)\r\n      } else {\r\n          alert(data.error)\r\n      }\r\n  }\r\n\r\n  return (\r\n  <div>\r\n      <h1>{quote || \"No quote found\"}</h1>\r\n      <form onSubmit={updateQuote}>\r\n          <input \r\n              type=\"text\"\r\n              placeholder=\"Leave your review!\" \r\n              value={tempQuote} \r\n              onChange={(e => setTempQuote(e.target.value))}\r\n           />\r\n           <input type=\"submit\" value='Leave a Review' />\r\n      </form>\r\n  </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,eAAP;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAKA,eAAe,SAASC,QAAT,GAAoB;EACjC,MAAMC,OAAO,GAAGH,UAAU,EAA1B;EACA,MAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;;EAGA,eAAeW,aAAf,GAA8B;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,EAAoC;MACvDC,OAAO,EAAE;QACL,kBAAkBC,YAAY,CAACC,OAAb,CAAqB,OAArB;MADb;IAD8C,CAApC,CAAvB;IAMA,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;;IACA,IAAGD,IAAI,CAACE,MAAL,KAAgB,IAAnB,EAAwB;MACpBX,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;IACH,CAFD,MAEO;MACHa,KAAK,CAACH,IAAI,CAACI,KAAN,CAAL;IACH;EAEJ;;EAEDpB,SAAS,CAAC,MAAI;IACV,MAAMqB,KAAK,GAAGP,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;IACA,IAAIM,KAAJ,EAAW;MACP,MAAMC,IAAI,GAAGnB,GAAG,CAACoB,MAAJ,CAAWF,KAAX,CAAb;;MACA,IAAG,CAACC,IAAJ,EAAU;QACNR,YAAY,CAACU,UAAb,CAAwB,OAAxB;QACAnB,OAAO,CAACoB,OAAR,CAAgB,QAAhB;MACH,CAHD,MAGO;QACHf,aAAa;MAChB;IACJ;EAEJ,CAZQ,CAAT;;EAcA,eAAegB,WAAf,CAA2BC,KAA3B,EAAiC;IAC7BA,KAAK,CAACC,cAAN;IACA,MAAMjB,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,EAAoC;MACvDiB,MAAM,EAAE,MAD+C;MAEvDhB,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,kBAAkBC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAFb,CAF8C;MAMvDe,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAClB1B,KAAK,EAAEE;MADW,CAAf;IANiD,CAApC,CAAvB;IAWA,MAAMQ,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;;IACA,IAAGD,IAAI,CAACE,MAAL,KAAgB,IAAnB,EAAwB;MACpBT,YAAY,CAAC,EAAD,CAAZ;MACAF,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;IACH,CAHD,MAGO;MACHa,KAAK,CAACH,IAAI,CAACI,KAAN,CAAL;IACH;EACJ;;EAED,oBACA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKd,KAAK,IAAI,gBAAd,CADJ,eAEI;IAAM,QAAQ,EAAEoB,WAAhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IACI,IAAI,EAAC,MADT;IAEI,WAAW,EAAC,oBAFhB;IAGI,KAAK,EAAElB,SAHX;IAII,QAAQ,EAAGyB,CAAC,IAAIxB,YAAY,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJhC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,eAOK;IAAO,IAAI,EAAC,QAAZ;IAAqB,KAAK,EAAC,gBAA3B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAPL,CAFJ,CADA;AAcD"},"metadata":{},"sourceType":"module"}